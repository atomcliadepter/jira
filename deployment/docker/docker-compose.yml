# Enhanced MCP Jira REST Server - Production Docker Compose
version: '3.8'

services:
  mcp-jira-server:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: mcp-jira-server
    restart: unless-stopped
    
    environment:
      # Application Configuration
      - NODE_ENV=production
      - LOG_LEVEL=info
      - MCP_SERVER_NAME=mcp-jira-rest-prod
      - MCP_SERVER_VERSION=1.0.0
      
      # Jira Configuration (set via .env file)
      - JIRA_BASE_URL=${JIRA_BASE_URL}
      - JIRA_EMAIL=${JIRA_EMAIL}
      - JIRA_API_TOKEN=${JIRA_API_TOKEN}
      
      # Confluence Configuration (optional)
      - CONFLUENCE_BASE_URL=${CONFLUENCE_BASE_URL:-}
      - CONFLUENCE_EMAIL=${CONFLUENCE_EMAIL:-}
      - CONFLUENCE_API_TOKEN=${CONFLUENCE_API_TOKEN:-}
      
      # Performance Configuration
      - REQUEST_TIMEOUT=30000
      - MAX_RETRIES=3
      - RETRY_DELAY=1000
      
      # Monitoring Configuration
      - METRICS_ENABLED=true
      - HEALTH_CHECK_INTERVAL=30000
      - PROMETHEUS_PORT=9090
      
      # Cache Configuration
      - CACHE_MAX_SIZE=104857600  # 100MB
      - CACHE_DEFAULT_TTL=300000  # 5 minutes
      - CACHE_MAX_ENTRIES=10000
      
      # Security Configuration
      - RATE_LIMIT_WINDOW=60000   # 1 minute
      - RATE_LIMIT_MAX=100        # 100 requests per minute
      - ENABLE_CORS=false
      - TRUST_PROXY=true
    
    ports:
      - "3000:3000"      # Main application port
      - "9090:9090"      # Prometheus metrics port
    
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./config:/app/config:ro
    
    networks:
      - mcp-network
    
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    restart: unless-stopped
    
    ports:
      - "9091:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    networks:
      - mcp-network
    
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    restart: unless-stopped
    
    ports:
      - "3001:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - mcp-network
    
    profiles:
      - monitoring

networks:
  mcp-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
