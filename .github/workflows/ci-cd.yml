name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint:check
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run tests
      run: npm run test:ci
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level high
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Output image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Deploy to staging
      run: |
        echo "Deploying ${{ needs.build.outputs.image }} to staging"
        
        # Update image in deployment manifest
        sed -i "s|IMAGE_PLACEHOLDER|${{ needs.build.outputs.image }}|g" deployment/k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f deployment/k8s/namespace.yaml
        kubectl apply -f deployment/k8s/configmap.yaml
        kubectl apply -f deployment/k8s/secret.yaml
        kubectl apply -f deployment/k8s/deployment.yaml
        kubectl apply -f deployment/k8s/service.yaml
        
        # Wait for rollout
        kubectl rollout status deployment/mcp-jira-server -n mcp-system --timeout=300s
        
        # Verify deployment
        kubectl get pods -n mcp-system -l app=mcp-jira-server
        
        # Health check
        STAGING_URL=$(kubectl get service mcp-jira-server -n mcp-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -n "$STAGING_URL" ]; then
          curl -f http://$STAGING_URL:9090/health || exit 1
        fi

  deploy-production:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
    
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Deploy to production
      run: |
        echo "Deploying ${{ needs.build.outputs.image }} to production"
        
        # Deploy with Helm for production
        helm upgrade --install mcp-jira-server ./deployment/helm/mcp-jira-server \
          --namespace mcp-system \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.event.release.tag_name }} \
          --set environment=production \
          --set replicaCount=3 \
          --set resources.requests.memory=512Mi \
          --set resources.requests.cpu=500m \
          --set resources.limits.memory=1Gi \
          --set resources.limits.cpu=1000m \
          --wait --timeout=600s
        
        # Verify deployment
        kubectl get pods -n mcp-system -l app.kubernetes.io/name=mcp-jira-server
        
        # Health check
        PROD_URL=$(kubectl get service mcp-jira-server -n mcp-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -n "$PROD_URL" ]; then
          curl -f http://$PROD_URL:9090/health || exit 1
        fi
        
        # Run smoke tests
        echo "Running production smoke tests..."
        kubectl run smoke-test --rm -i --restart=Never --image=curlimages/curl -- \
          curl -f http://mcp-jira-server.mcp-system.svc.cluster.local:9090/health
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "âœ… Production deployment successful!"
        echo "Version: ${{ github.event.release.tag_name }}"
        echo "Image: ${{ needs.build.outputs.image }}"
